--전인하 학생의 생년월일중 연,월을 출력(YY-MM)

SELECT BIRTHDATE ,TO_CHAR(BIRTHDATE,'YY-MM') BIRTHDATE FROM STUDENT WHERE name = '전인하'; 

-- DAY MONTH DD YYYY 형식으로 102 학과 학생의 생년월일 출력

SELECT BIRTHDATE,TO_CHAR(BIRTHDATE,'DAY MON DD YYYY') FROM STUDENT WHERE DEPTNO = 102;


SELECT NAME,SAL,COMM,TO_CHAR((SAL+COMM) * 12 , '9,999') ANUAL FROM PROFESSOR WHERE COMM IS NOT NULL ;

SELECT  TO_NUMBER('1234'),
--TO_NUMBER('ABCD'),
TO_NUMBER('1,234','9,999') FROM DUAL;

--학과번호가 101 컴퓨터공학과 102 멀티미디어학과 201기계공학과

SELECT NAME,DEPTNO,DECODE(DEPTNO,101,'컴퓨터공학과',102,'멀티미디어학과','기계공학과') AS DNAME FROM STUDENT ;


--교수테이블에서 101 == 10% 102 == 20% 201 == 30% 보너스지급 나머지는 0

SELECT NAME,DEPTNO,SAL,CASE
WHEN DEPTNO = 101 THEN SAL * 0.1
WHEN DEPTNO = 102 THEN SAL * 0.2
WHEN DEPTNO = 201 THEN SAL * 0.3
ELSE 0
END Bonus,
CASE DEPTNO 
	WHEN 101 THEN SAL * 0.1
	WHEN 102 THEN SAL * 0.1
	WHEN 201 THEN SAL * 0.3
	END BONUS2
FROM PROFESSOR ;	




SELECT * FROM STUDENT ;

--그룹
--교수의 인원수를 조회

SELECT COUNT(*),COUNT(COMM),MAX(SAL),MIN(SAL) FROM PROFESSOR p ;
--
SELECT COUNT(*) FROM PROFESSOR WHERE COMM IS NOT NULL;

-- 101학과 학생들의 몸무게 평균과 함계를 구하여라

SELECT AVG(WEIGHT),SUM(WEIGHT),MIN(HEIGHT),MAX(HEIGHT) FROM STUDENT WHERE DEPTNO =101;

-- 학년별인원수

SELECT GRADE,COUNT(*),DEPTNO FROM STUDENT GROUP BY GRADE,DEPTNO  ORDER  BY 1,2;

-- 학과 번호별 교수의 인원수를 조회
SELECT COUNT(*),DEPTNO,COUNT(COMM) FROM PROFESSOR GROUP BY DEPTNO ;
-- 학과별로 소속 교수들의 평균급여 최소급여 최대급여를 구하여라
SELECT * FROM PROFESSOR p ;
SELECT DEPTNO,AVG(SAL),MIN(COMM),MAX(COMM) FROM PROFESSOR GROUP BY DEPTNO;

--학생의 학과와 학년을 기준으로 그룹하여 학과와 학년별 인원수와 평균 체중을 구하고 반올림

SELECT DEPTNO,GRADE ,COUNT(*) ,ROUND(AVG(WEIGHT)) FROM STUDENT GROUP BY DEPTNO ,GRADE; 

--학생의 생년월일 (BIRTHDATE)를 기준으로 탄생 계절별 인원수 구하기

SELECT TO_CHAR(ADD_MONTHS(BIRTHDATE,-2) , 'Q') AS A,
CASE TO_CHAR(ADD_MONTHS(BIRTHDATE,-2) , 'Q')
	WHEN '1' THEN '봄'
	WHEN '2' THEN '여름'
	WHEN '3' THEN '가을'
	WHEN '4' THEN '겨울'
END SAESON
, COUNT(*) FROM STUDENT GROUP BY TO_CHAR(ADD_MONTHS(BIRTHDATE,-2) , 'Q')
	ORDER BY TO_CHAR(ADD_MONTHS(BIRTHDATE,-2) , 'Q');
--서브쿼리
SELECT A,COUNT(*) FROM(
SELECT TO_CHAR(ADD_MONTHS(BIRTHDATE,-2) , 'Q') A FROM STUDENT 
)GROUP BY A;


--ROLLUP : 부분합 -> 축 한방향
-- CUBE : 부분합,양축
SELECT DEPTNO ,POSITION,COUNT(*) FROM PROFESSOR GROUP BY DEPTNO,POSITION
UNION
SELECT DEPTNO,NULL,COUNT(*)  FROM PROFESSOR GROUP BY DEPTNO ORDER BY POSITION
UNION
SELECT NULL,NULL,COUNT(*) FROM PROFESSOR ORDER BY POSITION;

SELECT DEPTNO,POSITION,COUNT(*) FROM PROFESSOR GROUP BY ROLLUP (DEPTNO ,POSITION) ORDER BY POSITION; 


SELECT DEPTNO,GRADE,COUNT(*),GROUPING(DEPTNO),GROUPING(GRADE) FROM STUDENT GROUP BY CUBE(DEPTNO,GRADE) ORDER BY 1, 2;

--gkrtodtnrk 4명 이상인 학년에 대해 학생 평균 신장과 체중을 조회

SELECT GRADE,COUNT(*) FROM STUDENT WHERE DEPTNO=101 GROUP BY GRADE HAVING COUNT(STUDNO) >= 2 ORDER BY GRADE ;

--FROM > WHERE > GROUP > HAVING > SELECCT > ORDER

--101학과가 아닌 학생들의 인원수 조회

SELECT COUNT(*),DEPTNO FROM STUDENT WHERE DEPTNO != 101 GROUP BY DEPTNO;

-- 학과별 학생의 평균 몸무게 중 최대값을 구하여라.

SELECT MAX(DEPTNO) ,MAX(AVG(WEIGHT)),count(*) FROM STUDENT GROUP BY DEPTNO  ;

SELECT DEPTNO  FROM PROFESSOR 
UNION
SELECT DEPTNO  FROM STUDENT  ;

SELECT STUDNO,NAME,s.DEPTNO AS sd,d.DEPTNO AS dd FROM STUDENT s,DEPARTMENT d WHERE s.DEPTNO  != d.DEPTNO ;

SELECT * FROM DEPARTMENT d ;
--학생 16명
--학과 7개

--카티션 프로덕트
SELECT * FROM DEPARTMENT d ;

--전인하 학생의 학번 ,이름,학과 이름 그리고 학과위치
--SELECT s.NAME,s.DEPTNO,d.DNAME,d.loc FROM STUDENT s ,DEPARTMENT d AND NAME ='전인하' AND s.DEPTNO  = d.DEPTNO;

--몸무게가 80KG이상인 학생의 학번,이름 ,체중,학과이름,학과위치 조회
SELECT * FROM DEPARTMENT d ;
SELECT s.STUDNO ,NAME,WEIGHT,d.DNAME,d.LOC FROM STUDENT s ,DEPARTMENT d WHERE s.WEIGHT >=80 AND s.DEPTNO  = d.DEPTNO ;

--1호관 소속 학생의 학번,이름,학과이름 조회
SELECT * FROM STUDENT s ;
SELECT STUDNO,NAME,d.LOC,DNAME FROM STUDENT s ,DEPARTMENT d WHERE d.LOC = '1호관' AND s.DEPTNO =d.DEPTNO ;


--ANSI 99 (SQL표준);
SELECT * FROM DEPARTMENT CROSS JOIN STUDENT s WHERE LOC = '1호관';

--자연조인을 사용하여 학번,이름,학과번호 ,학과이름 조회

SELECT * FROM STUDENT s  NATURAL JOIN DEPARTMENT d ;

SELECT * FROM STUDENT s ,DEPARTMENT d WHERE s.DEPTNO = D.DEPTNO ;

--JOIN ~ USING,JOIN -ON (표준문법)

SELECT * FROM STUDENT s JOIN DEPARTMENT d USING(DEPTNO);

SELECT * FROM STUDENT s JOIN DEPARTMENT d ON s.DEPTNO = d.DEPTNO ;

-- NETURAL JOIN을 사용 교수번호,교수이름 ,학과번호,학과이름 조회

SELECT DEPTNO,DNAME,NAME,PROFNO FROM PROFESSOR p NATURAL JOIN DEPARTMENT d  ;

-- 교수별 급여 등급을 조회 , 대상테이블 : PROFESSOR,SALGRADE;
SELECT * FROM SALGRADE s ;
SELECT PROFNO,NAME,SAL,GRADE FROM PROFESSOR p ,SALGRADE s WHERE SAL BETWEEN LOSAL AND HISAL ;

--조인쿼리
SELECT PROFNO,NAME,SAL,GRADE FROM PROFESSOR p JOIN SALGRADE s ON SAL >= LOSAL AND SAL <= HISAL;


SELECT * FROM STUDENT s ;
-- 학번,이름,교수번호,담당교수이름

SELECT p.NAME AS pname,s.NAME AS sname,s.DEPTNO,p.PROFNO FROM STUDENT s ,PROFESSOR p WHERE s.PROFNO = p.PROFNO;
SELECT p.NAME AS pname,s.NAME AS sname,s.DEPTNO,p.PROFNO FROM STUDENT s LEFT OUTER JOIN PROFESSOR p ON s.PROFNO = p.PROFNO WHERE p.PROFNO IS NULL;
-- 학번,이름,교수번호,담당교수 leftJoin
SELECT STUDNO,S.NAME,PROFNO,p.NAME FROM STUDENT s RIGHT OUTER JOIN PROFESSOR p USING(PROFNO);

SELECT p.NAME AS pname,s.NAME AS sname,s.DEPTNO,PROFNO FROM STUDENT s LEFT OUTER JOIN PROFESSOR p USING(PROFNO);

SELECT p.NAME AS pname,s.NAME AS sname,s.DEPTNO,PROFNO FROM STUDENT s FULL JOIN PROFESSOR p USING(PROFNO);

-- 탄생 월별 학생 숫자 구하기
SELECT M,NVL(cnt,0) CNT FROM(
SELECT TO_CHAR(BIRTHDATE,'MM') M ,COUNT(*) CNT FROM STUDENT s GROUP BY TO_CHAR(BIRTHDATE,'MM') ORDER  BY 1 
) A RIGHT JOIN (SELECT LTRIM(TO_CHAR(ROWNUM,'00'))  M FROM STUDENT s WHERE ROWNUM <= 12 ) B USING (M) ORDER  BY 1;

-- SELF JOIN 을 이용하여 부서이름과 상위부서의 이름을 출력하라
SELECT * FROM DEPARTMENT d ;
SELECT d.dname || '의 소속학과는' || NVL2(d2.DNAME, D2.DNAME ||'입니다','없습니다' )
FROM DEPARTMENT d 
LEFT JOIN DEPARTMENT d2 ON d.COLLEGE = d2.DEPTNO ;

SELECT CONCAT(d.dname , '의 소속학과는') 
FROM DEPARTMENT d 
JOIN DEPARTMENT d2 ON d.COLLEGE = d2.DEPTNO ;

-- 학생의 학번,이름,담당교수의 교수번호,교수이름,학생의 소속학과이름을 조회
-- 단 모든 학생의 정보를 조회
SELECT * FROM DEPARTMENT d ;
SELECT STUDNO,S.NAME,PROFNO,P.NAME,DNAME FROM STUDENT s NATURAL JOIN DEPARTMENT d LEFT JOIN PROFESSOR p USING(PROFNO)  ;

-- 서브쿼리
-- 학번,이름,학과번호 , 학과이름 조회

SELECT NAME,STUDNO,DEPTNO,(SELECT DNAME FROM DEPARTMENT d WHERE d.DEPTNO = s.DEPTNO) DNAME,
(SELECT NAME FROM PROFESSOR p WHERE P.profNO = S.PROFNO) PNAME
FROM STUDENT s ;

SELECT NAME,s.DEPTNO,STUDNO,d.DNAME FROM STUDENT s  JOIN DEPARTMENT d ON s.DEPTNO = d.DEPTNO ;
